import streamlit as st
import os
import io
import zipfile
from google.auth.transport.requests import Request
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import Flow, InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import pandas as pd
from pptx import Presentation
import re
from urllib.parse import urlparse
import tempfile
import json
import requests
import time
from supabase import create_client, Client
from datetime import datetime
from googleapiclient.http import MediaIoBaseDownload
from google.oauth2 import service_account

# Configuraci√≥n de usuarios
USERS = {
    "admin": "09678916",
    "jsato": "SanManz12025", 
    "rrepetto": "SanManz22025"
}

def login_screen():
    """Pantalla de login simple"""
    st.set_page_config(
        page_title="ISILAudit IA - Login",
        page_icon="üîê",
        layout="centered"
    )
    
    # CSS personalizado para el login
    st.markdown("""
    <style>
    .login-container {
        max-width: 400px;
        margin: 0 auto;
        padding: 2rem;
        border-radius: 10px;
        box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        background-color: white;
    }
    .login-title {
        text-align: center;
        color: #1f77b4;
        margin-bottom: 2rem;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # T√≠tulo principal
    st.markdown("<h1 class='login-title'>üè≠ ISILAudit IA</h1>", unsafe_allow_html=True)
    st.markdown("<h3 style='text-align: center; color: #666;'>Iniciar Sesi√≥n</h3>", unsafe_allow_html=True)
    
    # Contenedor del login
    with st.container():
        col1, col2, col3 = st.columns([1, 2, 1])
        
        with col2:
            # Formulario de login
            with st.form("login_form"):
                usuario = st.text_input("üë§ Usuario", placeholder="Ingresa tu usuario")
                password = st.text_input("üîë Contrase√±a", type="password", placeholder="Ingresa tu contrase√±a")
                
                st.markdown("<br>", unsafe_allow_html=True)
                submit_button = st.form_submit_button("üîê Iniciar Sesi√≥n", use_container_width=True)
                
                if submit_button:
                    if usuario in USERS and USERS[usuario] == password:
                        st.session_state.authenticated = True
                        st.session_state.current_user = usuario
                        st.success("‚úÖ ¬°Login exitoso!")
                        time.sleep(1)
                        st.rerun()
                    else:
                        st.error("‚ùå Usuario o contrase√±a incorrectos")
                        time.sleep(2)
                        st.rerun()
    
    # Informaci√≥n adicional
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #888; font-size: 0.8em;'>
        <p>üîí Sistema de Auditor√≠a Inteligente</p>
        <p>Para soporte t√©cnico, contacta al administrador</p>
    </div>
    """, unsafe_allow_html=True)

def check_authentication():
    """Verificar si el usuario est√° autenticado"""
    if 'authenticated' not in st.session_state:
        st.session_state.authenticated = False
    
    if not st.session_state.authenticated:
        login_screen()
        st.stop()

def logout():
    """Cerrar sesi√≥n"""
    st.session_state.authenticated = False
    if 'current_user' in st.session_state:
        del st.session_state.current_user
    st.rerun()

# Configuraci√≥n de Google Drive API
SCOPES = ['https://www.googleapis.com/auth/drive.readonly']
CREDENTIALS_FILE = 'credentials.json'
TOKEN_FILE = 'token.json'

# Configuraci√≥n de Supabase
try:
    SUPABASE_URL = st.secrets.get("SUPABASE_URL", "")
    SUPABASE_KEY = st.secrets.get("SUPABASE_KEY", "")
except Exception as e:
    SUPABASE_URL = ""
    SUPABASE_KEY = ""

class GoogleDriveManager:
    def __init__(self):
        self.service = None
        self.credentials = None
    
    def authenticate(self):
        """Autenticaci√≥n con Service Account desde Streamlit Secrets"""
        try:
            # Verificar si tenemos credenciales de Service Account en secrets
            if hasattr(st, 'secrets') and 'GOOGLE_CREDENTIALS' in st.secrets:
                st.info("üîç Intentando autenticar con Service Account...")
                
                # Usar credenciales desde Streamlit Secrets (Service Account)
                credentials_info = json.loads(st.secrets["GOOGLE_CREDENTIALS"])
                creds = service_account.Credentials.from_service_account_info(
                    credentials_info, scopes=SCOPES
                )
                self.credentials = creds
                
                # Crear el servicio de Google Drive
                self.service = build('drive', 'v3', credentials=creds)
                
                # Verificar que la conexi√≥n funcione
                results = self.service.files().list(pageSize=1).execute()
                
                st.success("‚úÖ Conexi√≥n con Google Drive establecida (Service Account)")
                return True
                
            elif os.path.exists(CREDENTIALS_FILE):
                st.info("üîç Intentando autenticar con OAuth local...")
                
                # Fallback para desarrollo local con OAuth
                creds = None
                
                # Cargar token existente si existe
                if os.path.exists(TOKEN_FILE):
                    creds = Credentials.from_authorized_user_file(TOKEN_FILE, SCOPES)
                
                # Si no hay credenciales v√°lidas disponibles, permitir al usuario autenticarse
                if not creds or not creds.valid:
                    if creds and creds.expired and creds.refresh_token:
                        creds.refresh(Request())
                    else:
                        flow = InstalledAppFlow.from_client_secrets_file(CREDENTIALS_FILE, SCOPES)
                        
                        # Usar run_local_server para autenticaci√≥n autom√°tica
                        try:
                            creds = flow.run_local_server(port=8080, open_browser=True)
                        except Exception as e:
                            st.error(f"‚ùå Error en autenticaci√≥n: {str(e)}")
                            st.info("üí° Aseg√∫rate de que el puerto 8080 est√© disponible")
                            return False
                    
                    # Guardar las credenciales para la pr√≥xima ejecuci√≥n
                    with open(TOKEN_FILE, 'w') as token:
                        token.write(creds.to_json())
                
                # Crear el servicio de Google Drive
                self.service = build('drive', 'v3', credentials=creds)
                self.credentials = creds
                
                # Verificar que la conexi√≥n funcione
                results = self.service.files().list(pageSize=1).execute()
                
                st.success("‚úÖ Conexi√≥n con Google Drive establecida (OAuth local)")
                return True
            else:
                st.error("‚ùå No se encontraron credenciales de Google Drive")
                st.info("üí° Para producci√≥n: Configura GOOGLE_CREDENTIALS en Streamlit Secrets")
                st.info("üí° Para desarrollo: Coloca credentials.json en la carpeta del proyecto")
                return False
            
        except Exception as e:
            st.error(f"‚ùå Error al conectar con Google Drive: {str(e)}")
            st.error(f"üîç Detalle del error: {type(e).__name__}")
            return False

def main():
    # Verificar autenticaci√≥n antes de mostrar la aplicaci√≥n
    check_authentication()
    
    # Configuraci√≥n de la p√°gina
    st.set_page_config(
        page_title="ISILAudit IA",
        page_icon="üìä",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Header con informaci√≥n del usuario y logout
    col1, col2, col3 = st.columns([2, 1, 1])
    
    with col1:
        st.title("üè≠ ISILAudit IA")
    
    with col2:
        st.write(f"üë§ Usuario: **{st.session_state.current_user}**")
    
    with col3:
        if st.button("üö™ Cerrar Sesi√≥n", type="secondary"):
            logout()
    
    st.markdown("---")
    
    # Mostrar estado de Supabase
    if SUPABASE_URL and SUPABASE_KEY:
        st.sidebar.success(f"üóÑÔ∏è Supabase: Configurado")
        st.sidebar.write(f"URL: {SUPABASE_URL[:30]}...")
    else:
        st.sidebar.error("üóÑÔ∏è Supabase: No configurado")
        st.sidebar.write("Configura las credenciales en secrets.toml")
    
    # Crear las pesta√±as
    tab_names = [
        "URL", "Plantillas", "Bibliograf√≠a", "Im√°genes", 
        "Archivos", "Redacci√≥n", "Secuencia", "Videos", "Datos"
    ]
    
    tabs = st.tabs(tab_names)
    
    # Pesta√±a URL (principal)
    with tabs[0]:
        st.header("üîó An√°lisis de URLs en Presentaciones")
        
        # Verificar disponibilidad de Google Drive
        has_google_credentials = (
            (hasattr(st, 'secrets') and 'GOOGLE_CREDENTIALS' in st.secrets) or 
            os.path.exists(CREDENTIALS_FILE)
        )
        
        if has_google_credentials:
            # Modo completo - con Google Drive
            st.success("üìÅ **Google Drive configurado correctamente**")
            
            # Inicializar el manager de Google Drive
            if 'drive_manager' not in st.session_state:
                st.session_state.drive_manager = GoogleDriveManager()
            
            # Bot√≥n de conexi√≥n a Google Drive
            connect_button = st.button("üîå Conectar con Google Drive", type="primary")
            
            if connect_button:
                with st.spinner("üîê Autenticando con Google Drive..."):
                    st.session_state.connected = st.session_state.drive_manager.authenticate()
            
            # Mostrar estado de conexi√≥n
            if st.session_state.get('connected', False):
                st.success("üìÅ Conectado a Google Drive exitosamente")
            else:
                st.info("üëÜ Haz clic en 'Conectar con Google Drive' para comenzar")
        
        else:
            # Modo demo - sin Google Drive
            st.info("üåê **Modo Demo - Sin Google Drive**")
            st.warning("üìÅ Google Drive no est√° configurado")
            
            st.markdown("""
            ### üîß Para usar Google Drive:
            
            **En Streamlit Cloud:**
            1. Configura `GOOGLE_CREDENTIALS` en **Settings ‚Üí Secrets**
            2. Usar Service Account JSON completo
            
            **En desarrollo local:**
            1. Coloca `credentials.json` en la carpeta del proyecto
            
            ### üß™ **Modo Demo**
            Mientras tanto, puedes probar la funcionalidad con datos de ejemplo:
            """)
            
            if st.button("üéØ Generar Datos de Ejemplo", type="primary"):
                st.success("‚úÖ Datos de ejemplo generados")
                
                # Generar URLs de ejemplo
                sample_urls = [
                    {
                        'filename': 'demo_presentation.pptx',
                        'slide': 1,
                        'url': 'https://www.google.com',
                        'location': 'Diapositiva 1 - Texto',
                        'context': 'Google Search',
                        'subfolder': '12345-SESION01',
                        'domain': 'google.com'
                    },
                    {
                        'filename': 'demo_presentation.pptx',
                        'slide': 2,
                        'url': 'https://www.github.com',
                        'location': 'Diapositiva 2 - Hiperv√≠nculo',
                        'context': 'GitHub Repository',
                        'subfolder': '12345-SESION01',
                        'domain': 'github.com'
                    }
                ]
                
                # Mostrar tabla
                df = pd.DataFrame(sample_urls)
                st.dataframe(df[['filename', 'slide', 'url', 'context']], use_container_width=True)
    
    # Pesta√±as vac√≠as (2-9)
    for i in range(1, 9):
        with tabs[i]:
            st.header(f"üöß {tab_names[i]}")
            st.info("Esta secci√≥n estar√° disponible pr√≥ximamente.")

if __name__ == "__main__":
    main() 